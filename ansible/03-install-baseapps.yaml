- name: BaseApps
  hosts: K3S_MASTER
  environment:
    K8S_AUTH_KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
    KUBECONFIG: "/etc/rancher/k3s/k3s.yaml"
  tasks:
  - name: install kubernetes pip module
    become: true
    apt:
      name: python3-kubernetes
      state: present
  - name: install jsonpatch pip module
    become: true
    apt:
      name: python3-jsonpatch
      state: present
  - name: Deploy coredns manually
    become: true
    kubernetes.core.k8s:
      kubeconfig: /etc/rancher/k3s/k3s.yaml
      state: present
      definition:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          labels:
            k8s-app: kube-dns
            kubernetes.io/name: CoreDNS
          name: coredns
          namespace: kube-system
        spec:
          progressDeadlineSeconds: 600
          replicas: 1
          revisionHistoryLimit: 0
          selector:
            matchLabels:
              k8s-app: kube-dns
          strategy:
            rollingUpdate:
              maxSurge: 25%
              maxUnavailable: 1
            type: RollingUpdate
          template:
            metadata:
              creationTimestamp: null
              labels:
                k8s-app: kube-dns
            spec:
              containers:
              - args:
                - -conf
                - /etc/coredns/Corefile
                image: rancher/mirrored-coredns-coredns:1.10.1
                imagePullPolicy: IfNotPresent
                livenessProbe:
                  failureThreshold: 3
                  httpGet:
                    path: /health
                    port: 8080
                    scheme: HTTP
                  initialDelaySeconds: 60
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 1
                name: coredns
                ports:
                - containerPort: 53
                  name: dns
                  protocol: UDP
                - containerPort: 53
                  name: dns-tcp
                  protocol: TCP
                - containerPort: 9153
                  name: metrics
                  protocol: TCP
                readinessProbe:
                  failureThreshold: 3
                  httpGet:
                    path: /ready
                    port: 8181
                    scheme: HTTP
                  periodSeconds: 2
                  successThreshold: 1
                  timeoutSeconds: 1
                resources:
                  limits:
                    memory: 170Mi
                  requests:
                    cpu: 100m
                    memory: 70Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    add:
                    - NET_BIND_SERVICE
                    drop:
                    - all
                  readOnlyRootFilesystem: true
                terminationMessagePath: /dev/termination-log
                terminationMessagePolicy: File
                volumeMounts:
                - mountPath: /etc/coredns
                  name: config-volume
                  readOnly: true
                - mountPath: /etc/coredns/custom
                  name: custom-config-volume
                  readOnly: true
              dnsPolicy: Default
              nodeSelector:
                kubernetes.io/os: linux
              priorityClassName: system-cluster-critical
              restartPolicy: Always
              schedulerName: default-scheduler
              securityContext: {}
              serviceAccount: coredns
              serviceAccountName: coredns
              terminationGracePeriodSeconds: 30
              tolerations:
              - key: CriticalAddonsOnly
                operator: Exists
              - effect: NoSchedule
                key: node-role.kubernetes.io/control-plane
                operator: Exists
              - effect: NoSchedule
                key: node-role.kubernetes.io/master
                operator: Exists
              topologySpreadConstraints:
              - labelSelector:
                  matchLabels:
                    k8s-app: kube-dns
                maxSkew: 1
                topologyKey: kubernetes.io/hostname
                whenUnsatisfiable: DoNotSchedule
              volumes:
              - configMap:
                  defaultMode: 420
                  items:
                  - key: Corefile
                    path: Corefile
                  - key: NodeHosts
                    path: NodeHosts
                  name: coredns
                name: config-volume
              - configMap:
                  defaultMode: 420
                  name: coredns-custom
                  optional: true
                name: custom-config-volume
        status:
          availableReplicas: 1
          conditions:
          - lastTransitionTime: "2024-02-02T18:10:07Z"
            lastUpdateTime: "2024-02-02T18:10:07Z"
            message: Deployment has minimum availability.
            reason: MinimumReplicasAvailable
            status: "True"
            type: Available
          - lastTransitionTime: "2024-02-02T18:10:07Z"
            lastUpdateTime: "2024-02-02T18:10:23Z"
            message: ReplicaSet "coredns-6799fbcd5" has successfully progressed.
            reason: NewReplicaSetAvailable
            status: "True"
            type: Progressing
          observedGeneration: 1
          readyReplicas: 1
          replicas: 1
          updatedReplicas: 1
  - name: Download metallb manifest to the cluster.
    become: true
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/metallb/metallb/v0.14.3/config/manifests/metallb-native.yaml
      dest: ~/metallb.yaml
      mode: '0664'
  - name: Apply metallb manifest to the cluster.
    become: true
    kubernetes.core.k8s:
      kubeconfig: /etc/rancher/k3s/k3s.yaml
      state: present
      src: ~/metallb.yaml
  - name: Define metallb ip range
    become: true
    kubernetes.core.k8s:
      kubeconfig: /etc/rancher/k3s/k3s.yaml
      state: present
      definition:
        apiVersion: metallb.io/v1beta1
        kind: IPAddressPool
        metadata:
          name: metallb-pool
          namespace: metallb-system
        spec:
          addresses:
          - 10.10.20.101-10.10.20.200
  - name: Define metallb l2 advertisement
    become: true
    kubernetes.core.k8s:
      kubeconfig: /etc/rancher/k3s/k3s.yaml
      state: present
      definition:
        apiVersion: metallb.io/v1beta1
        kind: L2Advertisement
        metadata:
          name: metallb-l2ad
          namespace: metallb-system
  - name: Create a argocd namespace
    become: true
    kubernetes.core.k8s:
      name: argocd
      api_version: v1
      kind: Namespace
      state: present
  - name: Download argocd manifest to the cluster.
    become: true
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      dest: ~/argocd.yaml
      mode: '0664'
  - name: Apply argocd manifest to the cluster.
    become: true
    kubernetes.core.k8s:
      kubeconfig: ~/.kube/kube-config
      state: present
      src: ~/argocd.yaml
      namespace: argocd
  - name: Patch argocd-server service to make it accessible
    become: true
    command: "kubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'"
  - name: bootstrap argocd apps
    become: true
    kubernetes.core.k8s:
      kubeconfig: ~/.kube/kube-config
      state: present
      definition:
        apiVersion: argoproj.io/v1alpha1
        kind: Application
        metadata:
          name: argocd-bootstrap
          namespace: argocd
          finalizers:
          - resources-finalizer.argocd.argoproj.io
        spec:
          destination:
            namespace: argocd
            server: https://kubernetes.default.svc
          project: default
          source:
            path: argocd
            repoURL: https://github.com/sam-bowman/homelab-cluster
            targetRevision: HEAD
  - name: Get argocd admin password
    become: true
    shell: "kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d"
    register: argocd_admin_pass
  - name: output argocd admin pass
    debug:
      msg: "{{ argocd_admin_pass.stdout }}"
    